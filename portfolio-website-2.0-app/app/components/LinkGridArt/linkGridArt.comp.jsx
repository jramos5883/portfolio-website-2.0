"use client";

import React, { useEffect } from "react";
import anime from "animejs";

export default function LinkGridArt() {
  const rows = 24;
  const cols = 18;

  // Example color data, replace with your actual pixel art color data
  const linkColors = [
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "black",
      "black",
      "black",
      "black",
      "black",
      "black",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "black",
      "black",
      "green",
      "green",
      "green",
      "green",
      "black",
      "black",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "black",
      "black",
      "green",
      "green",
      "green",
      "green",
      "green",
      "green",
      "black",
      "black",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "black",
      "black",
      "green",
      "green",
      "green",
      "green",
      "green",
      "green",
      "green",
      "green",
      "black",
      "black",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "black",
      "green",
      "black",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "black",
      "green",
      "black",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "black",
      "black",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "black",
      "black",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "black",
      "black",
      "yellow",
      "yellow",
      "black",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "black",
      "yellow",
      "yellow",
      "black",
      "black",
      "white",
      "white",
    ],
    [
      "black",
      "black",
      "black",
      "black",
      "yellow",
      "black",
      "yellow",
      "yellow",
      "yellow",
      "yellow",
      "black",
      "black",
      "black",
      "yellow",
      "black",
      "black",
      "black",
      "black",
    ],
    [
      "black",
      "tan",
      "tan",
      "black",
      "black",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
    [
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
      "white",
    ],
  ];

  useEffect(() => {
    anime({
      targets: ".link-pixel", // Target each pixel div
      opacity: [0, 1], // Animate opacity from 0 to 1
      easing: "easeInOutQuad",
      delay: anime.stagger(500, { grid: [cols, rows], from: "center" }), // Stagger the animation
    });
  }, []);

  return (
    <div className="flex flex-col justify-center items-center mb-48">
      {Array.from({ length: rows }).map((_, rowIndex) => (
        <div key={rowIndex} className="flex flex-row">
          {Array.from({ length: cols }).map((_, colIndex) => (
            <div
              key={colIndex}
              className="link-pixel w-4 h-4"
              style={{
                backgroundColor: linkColors[rowIndex][colIndex],
                border: "1px solid black",
              }}
            ></div>
          ))}
        </div>
      ))}
    </div>
  );
}
